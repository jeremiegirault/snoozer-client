// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snoozer.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Snoozer.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SNZSnoozerRoot

@implementation SNZSnoozerRoot

@end

#pragma mark - SNZSnoozerRoot_FileDescriptor

static GPBFileDescriptor *SNZSnoozerRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"snoozer"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SNZNull

@implementation SNZNull


typedef struct SNZNull__storage_ {
  uint32_t _has_storage_[1];
} SNZNull__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SNZNull class]
                                     rootClass:[SNZSnoozerRoot class]
                                          file:SNZSnoozerRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SNZNull__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SNZAuthUrl

@implementation SNZAuthUrl

@dynamic URL;

typedef struct SNZAuthUrl__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} SNZAuthUrl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = SNZAuthUrl_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SNZAuthUrl__storage_, URL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SNZAuthUrl class]
                                     rootClass:[SNZSnoozerRoot class]
                                          file:SNZSnoozerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SNZAuthUrl__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SNZEvent

@implementation SNZEvent

@dynamic id_p;
@dynamic name;
@dynamic start;
@dynamic end;
@dynamic allDay;

typedef struct SNZEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *start;
  NSString *end;
} SNZEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SNZEvent_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SNZEvent__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = SNZEvent_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SNZEvent__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "start",
        .dataTypeSpecific.className = NULL,
        .number = SNZEvent_FieldNumber_Start,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SNZEvent__storage_, start),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "end",
        .dataTypeSpecific.className = NULL,
        .number = SNZEvent_FieldNumber_End,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SNZEvent__storage_, end),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "allDay",
        .dataTypeSpecific.className = NULL,
        .number = SNZEvent_FieldNumber_AllDay,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SNZEvent class]
                                     rootClass:[SNZSnoozerRoot class]
                                          file:SNZSnoozerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SNZEvent__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SNZEvents

@implementation SNZEvents

@dynamic eventsArray, eventsArray_Count;

typedef struct SNZEvents__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *eventsArray;
} SNZEvents__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SNZEvent),
        .number = SNZEvents_FieldNumber_EventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SNZEvents__storage_, eventsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SNZEvents class]
                                     rootClass:[SNZSnoozerRoot class]
                                          file:SNZSnoozerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SNZEvents__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SNZSwipeRequest

@implementation SNZSwipeRequest

@dynamic eventId;

typedef struct SNZSwipeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *eventId;
} SNZSwipeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "eventId",
        .dataTypeSpecific.className = NULL,
        .number = SNZSwipeRequest_FieldNumber_EventId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SNZSwipeRequest__storage_, eventId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SNZSwipeRequest class]
                                     rootClass:[SNZSnoozerRoot class]
                                          file:SNZSnoozerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SNZSwipeRequest__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SNZSwipeResponse

@implementation SNZSwipeResponse

@dynamic hasEvent, event;

typedef struct SNZSwipeResponse__storage_ {
  uint32_t _has_storage_[1];
  SNZEvent *event;
} SNZSwipeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "event",
        .dataTypeSpecific.className = GPBStringifySymbol(SNZEvent),
        .number = SNZSwipeResponse_FieldNumber_Event,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SNZSwipeResponse__storage_, event),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SNZSwipeResponse class]
                                     rootClass:[SNZSnoozerRoot class]
                                          file:SNZSnoozerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SNZSwipeResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
